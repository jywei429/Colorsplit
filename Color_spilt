clc;
clear;
close all;

%% Load reference images and test image (uint16)
% ref im 1
ref1 = imread("C4.tif");

% ref im 2
ref2 = imread("PtTFPP.tif");

% test image
testim = imread("test.tif");

%% Ensure consistent type (convert to double at the beginning)
ref1 = double(ref1); % convert to double, or it will have error when calculating M
ref2 = double(ref2);
testim = double(testim);

%% Apply filter to reduce noise, can imcrease accuracy but not much
% ref1 = imgaussfilt(ref1, 2); % Gaussian filter with sigma=2
% ref2 = imgaussfilt(ref2, 2);
% testim = imgaussfilt(testim, 2);

% % 2. Median Filtering, another method
% ref1 = medfilt3(ref1, [3 3 3]);
% ref2 = medfilt3(ref2, [3 3 3]);
% testim = medfilt3(testim, [3 3 3]);


% % % 3.Bilateral Filtering
% ref1 = imbilatfilt(ref1);
% ref2 = imbilatfilt(ref2);
% testim = imbilatfilt(testim);


% Bilateral Filtering
% reduces gaussian noise, will help a lot if there is a marker on PSP film
ref1 = imbilatfilt(ref1);
ref2 = imbilatfilt(ref2);
testim = imbilatfilt(testim);

% Non-Local Means Filtering
ref1 = imnlmfilt(ref1, 'DegreeOfSmoothing', 15);
ref2 = imnlmfilt(ref2, 'DegreeOfSmoothing', 15);
testim = imnlmfilt(testim, 'DegreeOfSmoothing', 15);



%% Calculate RGB means for reference images
ref1_mean = reshape(mean(mean(ref1, 1), 2), 1, 3); % [1, 3]
ref2_mean = reshape(mean(mean(ref2, 1), 2), 1, 3); % [1, 3]

% Ref matrix M
M = [ref1_mean; ref2_mean]';

% Reshape test image
testim_reshaped = reshape(testim, [], 3); % [M*N, 3]

%% Calculate weights using linear least squares
weights = testim_reshaped / M'; % [M*N, 2]
weights = max(weights, 0); % Clip negative weights to 0
weights = weights ./ sum(weights, 2); % Normalize weights to sum to 1

% Reshape weights into 2D images
sizeX = size(testim, 1);
sizeY = size(testim, 2);
weight1 = reshape(weights(:, 1), sizeX, sizeY); % ref1
weight2 = reshape(weights(:, 2), sizeX, sizeY); % ref2

%% Reconstruct test image
% Reconstruct the test image in double precision
test_sum_double = weight1 .* ref1 + weight2 .* ref2;

% Avoid direct conversion to uint16; use round and clip for consistency
test_sum_clipped = min(max(test_sum_double, 0), 65535); % Clip to [0, 65535]
test_sum_uint16 = uint16(round(test_sum_clipped)); % Convert to uint16

%% Display results
figure();
tiledlayout(2, 2);

nexttile;
imshow(weight1, []);
title('Weight for ref1');

nexttile;
imshow(weight2, []);
title('Weight for ref2');

nexttile;
imshow(uint16(testim), []); % Ensure test image is displayed as uint16
title('Original Test Image');

nexttile;
imshow(test_sum_uint16, []); % Display reconstructed image
title('Reconstructed Test Image uint16');

%% Calculate reconstruction error
% Compute reconstruction error in double precision
reconstruction_error = norm(test_sum_clipped(:) - testim(:)) / norm(testim(:));
disp(['Reconstruction Error: ', num2str(reconstruction_error)]);
